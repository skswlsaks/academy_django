version : '3'
services: # docker-compose 에서 컨테이너(service) 단위를 묶음
  db:
    image: mysql:5.7
    environment:
      MYSQL_DATABASE: 'tonysdb'
      # So you don't have to use root, but you can if you like
      MYSQL_USER: 'skswlsaks'
      # You can use whatever password you like
      MYSQL_PASSWORD: 'Tonyscoding8^'
      # Password for root access
      MYSQL_ROOT_PASSWORD: '84541913'
    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - '3306:3306'
    expose:
      # Opens port 3306 on the container
      - '3306'
      # Where our data will be persisted
    volumes:
      - my-db:/var/lib/mysql
  
  redis:
    image: redis:latest


  web: # 앱 service 이름
    build:
      dockerfile : Dockerfile # 빌드할 Docker 파일 위치

    # docker-compose up 을 command 창에 입력하면 실행할 명령어
    command: python manage.py runserver 0.0.0.0:8000 
    # 로컬 폴더(.)와 docker 의 /app 폴더를 마운트(연결)
    volumes: 
      - .:/app
    # docker 와 로컬에서 서로 입력 출력할 포트, 접근할 포트
    ports: 
      - "8000:8000"
    # docker 내에서 필요한 환경변수 설정
    depends_on:
      - redis 
    environment: 
      - DJANGO_SECRET_KEY
      - DB_NAME='db'

